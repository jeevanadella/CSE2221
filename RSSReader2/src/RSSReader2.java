import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Jeevan Nadella
 *
 */
public final class RSSReader2 {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader2() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

//        open html tags
        out.println("<html>");
        out.println("<head>");
        out.println("<title>");

//        prints title
        int titleIndex = getChildElement(channel, "title");
        if ((titleIndex > -1)
                && (channel.child(titleIndex).numberOfChildren() > 0)) {
            out.println(channel.child(titleIndex).child(0));
        } else {
            out.println("No title available");
        }
        out.println("</title>");
        out.println("</head>");
        out.println("<body>");

//        attaches link to title
        out.println("<h1>");
        int linkIndex = getChildElement(channel, "link");
        if ((linkIndex > -1)
                && (channel.child(linkIndex).numberOfChildren() > 0)) {
            out.println("<a ");
            out.print("href=");
            out.print(channel.child(linkIndex).child(0));
            out.print(">");
            out.println(channel.child(titleIndex).child(0));
            out.println("</a>");
        }
        out.println("</h1>");

//        adds description
        out.println("<p>");
        int descriptionIndex = getChildElement(channel, "description");
        if ((descriptionIndex > -1)
                && (channel.child(descriptionIndex).numberOfChildren() > 0)) {
            out.println(channel.child(descriptionIndex).child(0));
        } else {
            out.println("No description available");
        }
        out.println("</p>");

//        creates table with headers
        out.println("<table border='1'>");
        out.println("<tr>");

        out.println("<th>");
        out.println("Date");
        out.println("</th>");

        out.println("<th>");
        out.println("Source");
        out.println("</th>");

        out.println("<th>");
        out.println("News");
        out.println("</th>");

        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

//        closes html
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int i = -1, j = 0;
        boolean found = false;

//        finds the location of a tag
        while ((j < xml.numberOfChildren()) && (!found)) {
            if (xml.child(j).isTag()) {
                if (xml.child(j).label().equals(tag)) {
                    i = j;
                    found = true;
                } else {
                    j++;
                }
            } else {
                i = -1;
            }
        }
        return i;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");

//        prints publication date
        int dateIndex = getChildElement(item, "pubDate");
        out.println("<th>");
        if (dateIndex > -1) {
            out.println(item.child(dateIndex).child(0).label());
        } else {
            out.println("No date available");
        }
        out.println("</th>");

//        prints source
        int sourceIndex = getChildElement(item, "source");
        out.println("<th>");
        if (sourceIndex > -1) {
            if (item.child(sourceIndex).hasAttribute("url")) {
                String sourceIndexURL = item.child(sourceIndex)
                        .attributeValue("url");
                out.println("<a ");
                out.print("href=");
                out.print(sourceIndexURL);
                out.print(">");
                out.println(item.child(sourceIndex).child(0).label());
                out.println("</a>");
            }

        } else {
            out.println("No source available");
        }
        out.println("</th>");

//        prints title of news (as a hyperlink)
        int titleIndex = getChildElement(item, "title");
        int descriptionIndex = getChildElement(item, "description");
        out.println("<th>");

        int linkIndex = getChildElement(item, "link");
        if (linkIndex > -1) {
            out.print("<a href=\"");
            out.print(item.child(linkIndex).child(0).label());
            out.print("\">");
        }

        if (titleIndex != -1) {
            if (item.child(titleIndex).numberOfChildren() == 0) {
                out.print("No title available");
            } else {
                out.print(item.child(titleIndex).child(0).label());
            }
        } else if (descriptionIndex != -1) {
            if (item.child(descriptionIndex).child(0).label().equals("")) {
                out.print("No description available");
            } else {
                out.print(item.child(descriptionIndex).child(0).label());
            }
        }

        if (linkIndex > -1) {
            out.println("</a>");
        }

        out.println("</th>");

        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {

        XMLTree xml = new XMLTree1(url);

        if (xml.label().equals("rss") && xml.hasAttribute("version")
                && xml.attributeValue("version").equals("2.0")) {

            for (int i = 0; i < xml.numberOfChildren(); i++) {
                if (xml.child(i).label().equals("channel")) {
                    xml = xml.child(i);
                }
            }

            outputHeader(xml, out);

            for (int j = 0; j < xml.numberOfChildren(); j++) {
                if (xml.child(j).isTag()) {
                    if (xml.child(j).label().equals("item")) {
                        XMLTree item = xml.child(j);
                        processItem(item, out);
                    }
                }
            }
            outputFooter(out);
        } else {
            out.println("Invalid RSS file.");
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Enter a URL for an XML feed: ");
        String xmlURL = in.nextLine();
        XMLTree xml = new XMLTree1(xmlURL);

        if (xml.label().equals("feeds") && xml.hasAttribute("title")) {
            out.println(
                    "Enter a name of an output file (including .html extension): ");
            String outFile = in.nextLine();
            SimpleWriter mainOut = new SimpleWriter1L(outFile);

            String title = xml.attributeValue("title");
            mainOut.println("<html>");
            mainOut.println("<head>");
            mainOut.println("<title>" + title + "</title>");
            mainOut.println("</head>");
            mainOut.println("<body>");
            mainOut.println("<h1>" + title + "</h1>");
            mainOut.println("<ul>");

            for (int i = 0; i < xml.numberOfChildren(); i++) {
                if (xml.child(i).label().equals("feed")) {
                    String url = xml.child(i).attributeValue("url");
                    String name = xml.child(i).attributeValue("name");
                    String file = xml.child(i).attributeValue("file");

                    SimpleWriter news = new SimpleWriter1L(file);

                    processFeed(url, file, news);

                    mainOut.println("<li><a href=\"" + file + "\">" + name
                            + "</a></li>");
                    news.close();
                }
            }

            mainOut.println("</ul>");
            mainOut.println("</body>");
            mainOut.println("</html>");
            mainOut.close();
            in.close();
            out.close();

        } else {
            out.println("Invalid feed URL.");
        }
    }
}
