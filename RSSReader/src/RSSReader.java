import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Jeevan Nadella
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

//        open html tags
        out.println("<html>");
        out.println("<head>");
        out.println("<title>");

//        prints title
        int titleIndex = getChildElement(channel, "title");
        if ((titleIndex > -1)
                && (channel.child(titleIndex).numberOfChildren() > 0)) {
            out.println(channel.child(titleIndex).child(0));
        } else {
            out.println("No title available");
        }
        out.println("</title>");
        out.println("</head>");
        out.println("<body>");

//        attaches link to title
        out.println("<h1>");
        int linkIndex = getChildElement(channel, "link");
        if ((linkIndex > -1)
                && (channel.child(linkIndex).numberOfChildren() > 0)) {
            out.println("<a ");
            out.print("href=");
            out.print(channel.child(linkIndex).child(0));
            out.print(">");
            out.println(channel.child(titleIndex).child(0));
            out.println("</a>");
        }
        out.println("</h1>");

//        adds description
        out.println("<p>");
        int descriptionIndex = getChildElement(channel, "description");
        if ((descriptionIndex > -1)
                && (channel.child(descriptionIndex).numberOfChildren() > 0)) {
            out.println(channel.child(descriptionIndex).child(0));
        } else {
            out.println("No description available");
        }
        out.println("</p>");

//        creates table with headers
        out.println("<table border='1'>");
        out.println("<tr>");

        out.println("<th>");
        out.println("Date");
        out.println("</th>");

        out.println("<th>");
        out.println("Source");
        out.println("</th>");

        out.println("<th>");
        out.println("News");
        out.println("</th>");

        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

//        closes html
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int i = -1, j = 0;
        boolean found = false;

//        finds the location of a tag
        while ((j < xml.numberOfChildren()) && (!found)) {
            if (xml.child(j).isTag()) {
                if (xml.child(j).label().equals(tag)) {
                    i = j;
                    found = true;
                } else {
                    j++;
                }
            } else {
                i = -1;
            }
        }
        return i;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");

//        prints publication date
        int dateIndex = getChildElement(item, "pubDate");
        out.println("<th>");
        if (dateIndex > -1) {
            out.println(item.child(dateIndex).child(0));
        } else {
            out.println("No date available");
        }
        out.println("</th>");

//        prints source
        int sourceIndex = getChildElement(item, "source");
        out.println("<th>");
        if (sourceIndex > -1) {
            out.println(item.child(sourceIndex).attributeValue("url"));
        } else {
            out.println("No source available");
        }
        out.println("</th>");

//        prints title of news (as a hyperlink)
        int titleIndex = getChildElement(item, "title");
        out.println("<th>");
        if (titleIndex > -1) {
            int linkIndex = getChildElement(item, "link");
            out.println("<a ");
            out.print("href=");
            out.print(item.child(linkIndex).child(0));
            out.print(">");
            out.println(item.child(titleIndex).child(0));
            out.println("</a>");
        } else {
            out.println("No title available");
        }
        out.println("</th>");

        out.println("</tr>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

//        asks for rss and output file names
        out.println("Enter a URL for an RSS 2.0 feed: ");
        String rssURL = in.nextLine();

        XMLTree xml = new XMLTree1(rssURL);

        if (xml.label().equals("rss") && xml.hasAttribute("version")
                && xml.attributeValue("version").equals("2.0")) {
            out.println(

                    "Enter a name of an output file (including .html extension): ");
            String outFile = in.nextLine();

            SimpleWriter outputFile = new SimpleWriter1L(outFile);

//        makes xml document with root node channel
            for (int i = 0; i < xml.numberOfChildren(); i++) {
                if (xml.child(i).label() == "channel") {
                    xml = xml.child(i);
                }
            }

//        creates html output file
            outputHeader(xml, outputFile);

            for (int j = 0; j < xml.numberOfChildren(); j++) {
                if (xml.child(j).label() == "item") {
                    XMLTree item = xml.child(j);
                    processItem(item, outputFile);
                }
            }
            outputFile.close();
            outputFooter(outputFile);
        } else {
            out.println(
                    "The RSS is not version 2.0 and/or does not have a root <rss> tag.");
        }

//        closes inputs and outputs
        in.close();
        out.close();
    }

}
